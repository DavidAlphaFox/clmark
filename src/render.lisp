
(in-package #:clmark)

(defvar *current-rendering-style* nil)
(defvar *current-rendering-stream* nil)

(defgeneric render (thing style stream)
  (:method :around (o a s)
    (let ((*current-rendering-style* a)
          (*current-rendering-stream* s))
      (call-next-method)))
  (:method ((text string) as stream)
    (write-string text stream)))

(defun render-children (object &key (stream *current-rendering-stream*)
                                 (style *current-rendering-style*))
  (loop for child in (children object)
        do (render child style stream)))

(defun render-text (object &key (stream *current-rendering-stream*)
                             (style *current-rendering-style*))
  (if (rendered-text object)
      (write-string (rendered-text object) stream)
      (loop for text in (node-text object)
            do (render text style stream))))

(defmacro defrender (for-class (style stream-argument) &body body)
  (let ((as (gensym)))
    `(defmethod render ((,for-class ,for-class) (,as (eql ,style)) ,stream-argument)
       (declare (ignore ,as))
       ,@body)))

(defun render-inline-stack (stack string as)
  (with-output-to-string (stream)
    (do ((i 0 (1+ i))
         (sl (length string)))
        ((= i sl))
      (flet ((setindex (idx &key adjust)
               (if adjust
                   (incf i (1- idx))
                   (setf i (1- idx)))))
        (let ((open (find i stack :key #'open-delimiter-start))
              (close (find i stack :key #'close-delimiter-start)))
          (cond ((and open close)
                 (error
                  "Nodes cannot open on a character that closes another node"))
                ((and open (self-contained-p open))
                 (let ((new-idx (render-node open string as stream)))
                   (setindex new-idx :adjust nil)))
                ((and close (not (self-contained-p close)))
                 (render-node-close-delimiter close as stream)
                 (setindex (length (close-delimiter close)) :adjust t))
                (open
                 (render-node-open-delimiter open as stream)
                 (setindex (length (open-delimiter open)) :adjust t))
                (t (write-char (char string i) stream))))))))

(defgeneric render-block-inlines (block stack as)
  (:method ((block %block-node) stack (as (eql :html)))
    (let ((res (render-inline-stack stack (rendered-text block) as)))
      (setf (rendered-text block) res))))
